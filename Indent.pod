=head1 NAME

indent - simple indentation

=head1 VERSION

This module version is 0.3.

=head1 SYNOPSIS

    # Setup the indentation of 4 spaces and automatical line ending.
    # Print somthing starting from the level 1.
    use Indent;
    my $indent = Indent->new(size => 4, eol => 1);
    $indent->over;
    $indent->printf("Hello, world!");
    $indent->back;

=head1 DESCRIPTION

This module is designed to be used in the simplest way as much as possible. It ptrovides some methods to handle with indentation. Also it doesn't require any extra modules.

=head1 METHODS AND FEATURES

=head2 Constructor

The constructor is used to explicitly instantiate the indent object. 

By default (if no options provided) it creates the indent with C<4> space characters, starting level is C<0>, with no trailing newline. 

The following options are available:

=over 4

=item B<text> => I<STRING>

Use the I<STRING> as the indent.

=item B<tab> => I<0> | I<1>

Use the TAB character as the indent text.

=item B<size> => I<SIZE>

Use indent as the I<SIZE> length string of SPACE characters. The defauilt value is C<4>.

=item B<eol> => I<0> | I<1>

I<1> means add a newline automatically, when printing the indented line.

=item B<level> => I<LEVEL>

Specify the initial I<LEVEL> of the indent. If it is not specified, the 
default value I<0> is assumed.

=back

The options B<text>, B<tab> and B<size> have impact on the same stuff, so  
they have the order of their applying. The highest importance has B<text> 
and the lowest importance has B<size>. So the initial indent will be set 
accordingly the higher option. And others (if specified) will be ignored.

=head2 Features

The module provides overloading for some useful operators. All the 
overloaded operators are listed below:

=over 4

=item B<=>

Copy or clone the indent instance.

=item B<"">

Stringify the indent. It is used when passing the indent as the argument 
to C<print>.

=item B<++>

Increment the indent by I<1>.

=item B<-->

Decrement the indent by I<1>.

=item B<+>

Increase the indent adding the specified value.

=item B<->

Decrease the indent adding the specified value.

=back

=head2 Importing and Configuring

There is no needs to import anything. The indent object can be created explicitly by the program or implicitly within the module. 

To get access to the internally instatiated indent object you could use:

    my $indent = $Indent::indent;

=head2 Methods

There are few methods available for invoking as static methods or dynamic 
methods (OO-style). Each use case is specified separately. 

=over 4

=item *

C<indent>

Composes a string from a list of arguments prepended by the indent of the 
proper level and a new line as it is configured.

    use Indent;
    my $i = Indent->new(size => 4, eol => 1);
    $i->over;
    print $i->indent("to be or not to be");

=item *

C<reset>

Reset the indent by setting the level to I<0>.

=item *

C<over>

Increment the indent by I<1>.

=item *

C<back>

Decrement the indent by I<1>.

=item *

C<print>

Print the line of arguments with the curent indent.

=item *

C<vprint>

Print the lines of arguments with the curent indent.

=item *

C<printf>

Print the formatted line of arguments with the curent indent.

=back

=head2 Implicit (POD-style) use

    use Indent( text => " ", eol => 1, level => 1 );

    my @str = qw( down stairs to hell );

    Indent->printf("@str");
    ( Indent->over, Indent->printf($_) ) for ( @str );
    Indent->reset;
    Indent->printf("there is no way");

=head2 Explicit (OO-style) use

    use Indent;
    our $indent = Indent->new( text => " ", eol => 1, level => 1 );

    local $\ = "\n";
    my @str = qw( down stairs to hell );

    print($indent, "@str");
    {
        local $indent = $indent;
        ( ++$indent )->printf($_) for ( @str );
    }
    print($indent - 1, "there is no way");

=head2 Notes

The C<Indent::print> and C<*-E<gt>print> families methods work similar to 
their core analogs except they prepend the indent to each printed line and 
handle newline internally.

No other file handlers are supported except STDOUT. Indentation of other 
file handlers is available by passing the indent instance as the argument 
of the printing methods.

=head1 SEE ALSO

L<Text::Indent>

L<Print::Indented>

L<String::Indent>

... and lot of other competitors.

=head1 AUTHOR

Ildar Shaimordanov E<lt>ildar.shaimordanov@gmail.comE<gt>

=head1 COPYRIGHT

Copyright (c) 2017,2018 Ildar Shaimordanov. All rights reserved. 

This program is free software; you can redistribute it and/or modify it 
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut
