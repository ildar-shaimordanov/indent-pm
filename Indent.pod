=head1 NAME

indent - simple indentation

=head1 SYNOPSIS

    # Print with indentation of 4 spaces and automatical line ending.
    use Indent(size => 4, eol => 1);
    Indent::over;
    Indent::printf "Hello, world!";
    Indent::back;

=head1 DESCRIPTION

The module is designed to be used in simplest way as much as possible. It 
provides static methods to configure, turn on, turn off indentation and 
output using the current indentation.

=head1 METHODS AND FEATURES

=head2 Constructor

The constructor for Indent can be called for each indentation used by the 
program. To construct new indent object call the method C<new> with one or 
more hashed parameters:

=over 4

=item B<text> => I<STRING>

Use the I<STRING> as the indent.

=item B<tab> => I<0> | I<1>

Use the TAB character as the indent text.

=item B<size> => I<SIZE>

Use indent as the I<SIZE> length string of SPACE characters.

=item B<eol> => I<0> | I<1>

I<1> means add a newline automatically, when printing the indented line.

=item B<level> => I<LEVEL>

Specify the initial I<LEVEL> of the indent. If it is not specified, the 
default value I<0> is assumed.

=back

The options B<text>, B<tab> and B<size> have impact on the same stuff, so  
they have the order of their applying. The highest importance has B<text> 
and the lowest importance has B<size>. So the initial indent will be set 
accordingly the higher option. And others (if specified) will be ignored.

=head2 Features

The module provides overloading for some useful operators. All the 
overloaded operators are listed below:

=over 4

=item B<=>

Copy or clone the indent instance.

=item B<"">

Stringify the indent. It is used when passing the indent as the argument 
to C<print>.

=item B<++>

Increment the indent by I<1>.

=item B<-->

Decrement the indent by I<1>.

=item B<+>

Increase the indent adding the specified value.

=item B<->

Decrease the indent adding the specified value.

=back

=head2 Importing and Configuring

There is no needs to import anything. For simplicity and to escape use of 
indents in the OO-style, the module provides the configuring the indents 
automatically during import the module. This feature is supported by 
passing the options to the module (the same ones as described in the 
section Constructor above). 

    use Indent(size => 4, eol => 1);

In this case the module allows to turn the functionality using the static 
methods (see the next section).

=head2 Other methods

There are few methods available for invoking as static methods or dynamic 
methods (OO-style). Each use case is specified separately. 

=over 4

=item *

C<Indent::config>

The method is used to configure the indent. It is called internally, when 
using the module with options.

=item *

C<Indent::reset>

Reset the indent by setting the level to I<0>.

=item *

C<Indent::over>

Increment the indent by I<1>.

=item *

C<Indent::back>

Decrement the indent by I<1>.

=item *

C<Indent::print> or C<$indent-E<gt>print>

Print the line of arguments with the curent indent.

=item *

C<Indent::vprint> or C<$indent-E<gt>vprint>

Print the lines of arguments with the curent indent.

=item *

C<Indent::printf> or C<$indent-E<gt>printf>

Print the formatted line of arguments with the curent indent.

=back

=head2 Static (POD-style) use

    use Indent( text => " ", eol => 1, level => 1 );

    my @str = qw( down stairs to hell );

    Indent::printf "@str";
    ( Indent::over, Indent::printf $_ ) for ( @str );
    Indent::reset;
    Indent::printf("there is no way");

=head2 Dynamic (OO-style) use

    use Indent;
    our $indent = Indent->new( text => " ", eol => 1, level => 1 );

    local $\ = "\n";
    my @str = qw( down stairs to hell );

    print($indent, "@str");
    {
        local $indent = $indent;
        ( ++$indent )->printf($_) for ( @str );
    }
    print($indent - 1, "there is no way");

=head2 Notes

The C<Indent::print> and C<*-E<gt>print> families methods work similar to 
their core analogs except they prepend the indent to each printed line and 
handle newline internally.

No other file handlers are supported except STDOUT. Indentation of other 
file handlers is available by passing the indent instance as the argument 
of the printing methods.

=head1 SEE ALSO

L<Text::Indent>

L<Print::Indented>

L<String::Indent>

... and lot of other competitors.

=head1 AUTHOR

Ildar Shaimordanov E<lt>ildar.shaimordanov@gmail.comE<gt>

=head1 COPYRIGHT

Copyright (c) 2017 Ildar Shaimordanov. All rights reserved. 

This program is free software; you can redistribute it and/or modify it 
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut
